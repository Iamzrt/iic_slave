 /**
  ******************************************************************************
  * @file      
  * @author    
  * @version   
  * @date      
  * @brief    
	
  ******************************************************************************  
  * 
  * 
  ******************************************************************************
  */
/*-- includes ----------------------------------------------------------------*/  
#include "./hal_mcu.h"




/*-- defined -----------------------------------------------------------------*/
#define     SLAVE_ADDR               0x16

/* USER CODE BEGIN Private defines */
#define I2C_SLAVE_ADDR		   0x07
#define I2C_BUFFER_SIZE 	   64
#define I2C_READ_BYTES		   8
#define I2C_WRITE_BYTES 	   8
#define I2C_DUMMYWRITE_Bytes   3

#define I2C_WRITE_OPERATION		0
#define I2C_READ_OPERATION		1
#define I2C_DUMMYWRITTEN_DONE	1
#define I2C_DUMMYWRITTEN_UNDONE	0


#define ConfigurationRegisterBytes			0x58
 #define TriggerRegisterBytes				0x28
 #define ListRegisterBytes					(1490+3054+3054)
 #define ConfigurationRegisterStartAddrs	0x00
 #define TriggerRegisterStartAddr			0x100
 #define ListRegisterStartAddr				0x0400
 

/*-- private variables -------------------------------------------------------*/
static   I2C_HandleTypeDef  hi2c1;


u8_t gI2CDummyWriterBuffer[I2C_DUMMYWRITE_Bytes];
u8_t gI2CDummyWrittenDoneFlag = 0;
u8_t gUsartUpdateBuffer[I2C_BUFFER_SIZE];


 u8_t gConfigurationRegister[ConfigurationRegisterBytes];
 u8_t gTriggerRegister[TriggerRegisterBytes];
 u8_t gI2CWriteBuffer[I2C_BUFFER_SIZE] = {0};
 u8_t gI2CReadBuffer[I2C_BUFFER_SIZE] = {0};


/*-- functions ---------------------------------------------------------------*/
u8_t RegisterControl(u16_t RegisterAddress, u8_t OperaBytesLength, u8_t Operation)
{
	HAL_StatusTypeDef status = HAL_ERROR;
	u8_t *registerMaps;
	u8_t idx;
	
	if(RegisterAddress < TriggerRegisterStartAddr)
 	{
 		registerMaps = &gConfigurationRegister[RegisterAddress];
	}
	else if((RegisterAddress >= TriggerRegisterStartAddr) && (RegisterAddress < (TriggerRegisterStartAddr + TriggerRegisterBytes)))
	{
		registerMaps = &gTriggerRegister[RegisterAddress];
	}
	else
	{
		return status;
	}
	
	if(Operation == I2C_WRITE_OPERATION)
	{
		status = HAL_I2C_Slave_Receive(&hi2c1, registerMaps, OperaBytesLength, 1);
	}
	else
	{
		status = HAL_I2C_Slave_Transmit(&hi2c1, registerMaps, OperaBytesLength, 1);
	}


	if(status == HAL_OK)
	{
		printf("Address=0x%4x\r\n", RegisterAddress);
		for(idx = 0; idx < OperaBytesLength; idx++)
		{
			printf("0x%x\r\n", *(registerMaps + idx));
		}
	}
	return status;
 }
 

/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void   hal_iic_init(void)
{
	/* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
	
	hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = SLAVE_ADDR;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    
  }
	
  /* Configure Analogue filter */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    
  }
	
  /* Configure Digital filter */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    
  }
	
	/* I2C1 interrupt Init */
  HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(I2C1_IRQn);
	
	//HAL_I2C_Slave_Receive_IT(&hi2c1, &slaveRxData, I2C_REC_BYTES);
	
  i2c1_slave_start();
}



/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void i2c1_slave_start(void)
{
	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
	{
		//printf("HAL_I2C_EnableListen_IT Error\r\n");
	}
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
      {
        hi2c->State = HAL_I2C_STATE_READY;
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
  {
    hi2c->Instance->TXDR = 0x00U;
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
  }
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State = HAL_I2C_STATE_READY;
          hi2c->Mode = HAL_I2C_MODE_NONE;

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
static  HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      hi2c->State = HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
HAL_StatusTypeDef I2C_DummyWrite(I2C_HandleTypeDef *hi2c, u8_t *pData, u16_t Size, uint32_t Timeout)
{
  uint32_t tickstart = 0U;

  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    if ((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
      return HAL_TIMEOUT;
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
      return HAL_TIMEOUT;
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
        {
          /* Read data from RXDR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
          hi2c->XferCount--;
        }

        if (hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
        {
          return HAL_TIMEOUT;
        }
        else
        {
          return HAL_ERROR;
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferCount--;
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
	}
    else
	{
		return HAL_BUSY;
	}
}
  


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{

	}
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{

	}
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == hi2c1.Instance)
	{
		__HAL_I2C_GENERATE_NACK(&hi2c1);
		i2c1_slave_start();
	}
}



/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
u8_t I2C_SequentialControl(u8_t TransferDirection, u8_t DummyWrittenDoneFlag)
{
	HAL_StatusTypeDef status = HAL_ERROR;
	u8_t dummyWrittenFlag;
	
	if(I2C_DUMMYWRITTEN_UNDONE == DummyWrittenDoneFlag)
	{
		/* Dummy written undone */
		if(I2C_WRITE_OPERATION == TransferDirection)	// Dummy write
		{
			//status = I2C_DummyWrite(&hi2c1, gI2CDummyWriterBuffer, I2C_DUMMYWRITE_Bytes, 1);
			status = I2C_DummyWrite(&hi2c1, gI2CDummyWriterBuffer, 1, 1);
			dummyWrittenFlag = (status == HAL_OK) ? I2C_DUMMYWRITTEN_DONE : I2C_DUMMYWRITTEN_UNDONE;
		}
	}
	else	 
	{
		/* Dummy written done */
		RegisterControl((gI2CDummyWriterBuffer[0]<< 8) | (gI2CDummyWriterBuffer[1]), gI2CDummyWriterBuffer[2], TransferDirection);
		dummyWrittenFlag = I2C_DUMMYWRITTEN_UNDONE;
	}
	return dummyWrittenFlag;
}


/** 
  * @brief   
  * @param    
  * @param    
  * @return  
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, u8_t TransferDirection, u16_t AddrMatchCode)
{
	if(hi2c->Instance == hi2c1.Instance)
	{
		hi2c->State = HAL_I2C_STATE_READY;
		
		gI2CDummyWrittenDoneFlag = I2C_SequentialControl(TransferDirection, gI2CDummyWrittenDoneFlag);
		
		i2c1_slave_start();
	}
}



/** 
  * @brief   This function handles I2C1 global interrupt.
  * @param    
  * @param    
  * @return  
  */
void I2C1_IRQHandler(void)
{
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) 
	{
    HAL_I2C_ER_IRQHandler(&hi2c1);
  } 
	else 
	{
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
}

/*------------------ end of file ---------------------------------------------*/
